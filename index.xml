<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Groundswell Audio</title>
    <link>https://groundswellaudio.github.io/</link>
    <description>Recent content on Groundswell Audio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2021 23:30:05 +0100</lastBuildDate><atom:link href="https://groundswellaudio.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[C&#43;&#43;] Making a tuple with a lambda</title>
      <link>https://groundswellaudio.github.io/posts/cpp_lambda_tuple/</link>
      <pubDate>Sun, 31 Jan 2021 23:30:05 +0100</pubDate>
      
      <guid>https://groundswellaudio.github.io/posts/cpp_lambda_tuple/</guid>
      <description>If you&amp;rsquo;ve ever peeked at one implementation of std::tuple, you&amp;rsquo;ve probably witnessed a fireworks of templates and recursion. The core logic of this thing isn&amp;rsquo;t very complex, but the resulting code is pretty awful to look at.
In this post I&amp;rsquo;m going to show how to implement a tuple using only a single lambda as memory. I originally did that out of curiosity, but this implementation also turned out to compile very quickly.</description>
    </item>
    
  </channel>
</rss>
